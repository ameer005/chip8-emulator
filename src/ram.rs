/// storing fonts on meomory
/// chip-8 have 16 fonts which are 5 bytes long
/// they are used for displaying characters on screen
pub const FONTSET_START_ADDRESS: u16 = 0x50;
pub const FONT_SET: [u8; 80] = [
    0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
    0x20, 0x60, 0x20, 0x20, 0x70, // 1
    0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
    0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
    0x90, 0x90, 0xF0, 0x10, 0x10, // 4
    0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
    0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
    0xF0, 0x10, 0x20, 0x40, 0x40, // 7
    0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
    0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
    0xF0, 0x90, 0xF0, 0x90, 0x90, // A
    0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
    0xF0, 0x80, 0x80, 0x80, 0xF0, // C
    0xE0, 0x90, 0x90, 0x90, 0xE0, // D
    0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
    0xF0, 0x80, 0xF0, 0x80, 0x80, // F
];

pub struct RAM {
    memory: [u8; 0xFFF],
}

/// RAM public methods
impl RAM {
    pub fn init() -> RAM {
        let mut ram = RAM { memory: [0; 0xFFF] };
        ram.load_fonts();
        ram
    }

    pub fn read_byte(&mut self, addr: u16) -> u8 {
        self.memory[addr as usize]
    }

    pub fn write_byte(&mut self, addr: u16, value: u8) {
        self.memory[addr as usize] = value;
    }

    pub fn print_memory(&self) {
        println!("{:?}", self.memory)
    }
}

/// RAM private methods
impl RAM {
    fn load_fonts(&mut self) {
        for (i, &font) in FONT_SET.iter().enumerate() {
            self.write_byte(FONTSET_START_ADDRESS + i as u16, font);
        }
    }
}
